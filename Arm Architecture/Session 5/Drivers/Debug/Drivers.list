
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000bc8  08000bc8  00010bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bd0  08000bd0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd4  08000bd4  00010bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000004  08000bdc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000bdc  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a12  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008c1  00000000  00000000  00023a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b1c  00000000  00000000  00024300  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00024e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00024fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000cd6  00000000  00000000  00025158  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000252e  00000000  00000000  00025e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b383  00000000  00000000  0002835c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000336df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005c4  00000000  00000000  0003375c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bb0 	.word	0x08000bb0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000bb0 	.word	0x08000bb0

08000170 <Update>:

static void (* GP_IRQ[15])(void);


static void Update(EXIT_t *EXTI_Config)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	// 1- GPIO Init to be AF Input
	GPIO_PinConfig_t EXTI_PIN;
	EXTI_PIN.GPIOx = EXTI_Config->EXTI_PIN.GPIOx;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	60fb      	str	r3, [r7, #12]
	EXTI_PIN.GPIO_PinNumber = EXTI_Config->EXTI_PIN.Pin_Number;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	889b      	ldrh	r3, [r3, #4]
 8000182:	823b      	strh	r3, [r7, #16]
	EXTI_PIN.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000184:	2302      	movs	r3, #2
 8000186:	74fb      	strb	r3, [r7, #19]
	EXTI_PIN.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000188:	2308      	movs	r3, #8
 800018a:	74bb      	strb	r3, [r7, #18]
	GPIO_INIT(&EXTI_PIN);
 800018c:	f107 030c 	add.w	r3, r7, #12
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fb0c 	bl	80007ae <GPIO_INIT>
	//-------------------------------------------

	// 2- Configure AFIO To Rout to EXTI Line With Portx
	// To get The Reg in Array without If Condition
	uint8_t AFIO_Index = (EXTI_Config->EXTI_PIN.EXTI_Line / 4);
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	799b      	ldrb	r3, [r3, #6]
 800019a:	089b      	lsrs	r3, r3, #2
 800019c:	75fb      	strb	r3, [r7, #23]
	// To Get the Pos in Reg that i will write on it without if condition
	uint8_t AFIO_Bit_Pos = ((EXTI_Config->EXTI_PIN.EXTI_Line % 4) * 4);
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	799b      	ldrb	r3, [r3, #6]
 80001a2:	f003 0303 	and.w	r3, r3, #3
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	75bb      	strb	r3, [r7, #22]
	// Clear EXTICRx Reg to write on it
	AFIO->EXTICR[AFIO_Index] &= ~(0XF << AFIO_Bit_Pos);
 80001ac:	4a61      	ldr	r2, [pc, #388]	; (8000334 <Update+0x1c4>)
 80001ae:	7dfb      	ldrb	r3, [r7, #23]
 80001b0:	3302      	adds	r3, #2
 80001b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b6:	7dbb      	ldrb	r3, [r7, #22]
 80001b8:	210f      	movs	r1, #15
 80001ba:	fa01 f303 	lsl.w	r3, r1, r3
 80001be:	43db      	mvns	r3, r3
 80001c0:	4618      	mov	r0, r3
 80001c2:	495c      	ldr	r1, [pc, #368]	; (8000334 <Update+0x1c4>)
 80001c4:	7dfb      	ldrb	r3, [r7, #23]
 80001c6:	4002      	ands	r2, r0
 80001c8:	3302      	adds	r3, #2
 80001ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Writing On EXTICR Reg for Routing Pin as EXTI Line
	AFIO->EXTICR[AFIO_Index] |= ((AFIO_Mapping(EXTI_Config->EXTI_PIN.GPIOx) & 0xF) << AFIO_Bit_Pos);
 80001ce:	4a59      	ldr	r2, [pc, #356]	; (8000334 <Update+0x1c4>)
 80001d0:	7dfb      	ldrb	r3, [r7, #23]
 80001d2:	3302      	adds	r3, #2
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4956      	ldr	r1, [pc, #344]	; (8000338 <Update+0x1c8>)
 80001de:	428b      	cmp	r3, r1
 80001e0:	d016      	beq.n	8000210 <Update+0xa0>
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4955      	ldr	r1, [pc, #340]	; (800033c <Update+0x1cc>)
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d00f      	beq.n	800020c <Update+0x9c>
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4953      	ldr	r1, [pc, #332]	; (8000340 <Update+0x1d0>)
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d008      	beq.n	8000208 <Update+0x98>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4952      	ldr	r1, [pc, #328]	; (8000344 <Update+0x1d4>)
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d101      	bne.n	8000204 <Update+0x94>
 8000200:	2303      	movs	r3, #3
 8000202:	e006      	b.n	8000212 <Update+0xa2>
 8000204:	2300      	movs	r3, #0
 8000206:	e004      	b.n	8000212 <Update+0xa2>
 8000208:	2302      	movs	r3, #2
 800020a:	e002      	b.n	8000212 <Update+0xa2>
 800020c:	2301      	movs	r3, #1
 800020e:	e000      	b.n	8000212 <Update+0xa2>
 8000210:	2300      	movs	r3, #0
 8000212:	7db9      	ldrb	r1, [r7, #22]
 8000214:	408b      	lsls	r3, r1
 8000216:	4618      	mov	r0, r3
 8000218:	4946      	ldr	r1, [pc, #280]	; (8000334 <Update+0x1c4>)
 800021a:	7dfb      	ldrb	r3, [r7, #23]
 800021c:	4302      	orrs	r2, r0
 800021e:	3302      	adds	r3, #2
 8000220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//-------------------------------------------

	// 3- Update Rising or Falling Edge or both
	// Clearing it to Customize the function the user will choose
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 8000224:	4b48      	ldr	r3, [pc, #288]	; (8000348 <Update+0x1d8>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	7992      	ldrb	r2, [r2, #6]
 800022c:	4611      	mov	r1, r2
 800022e:	2201      	movs	r2, #1
 8000230:	408a      	lsls	r2, r1
 8000232:	43d2      	mvns	r2, r2
 8000234:	4611      	mov	r1, r2
 8000236:	4a44      	ldr	r2, [pc, #272]	; (8000348 <Update+0x1d8>)
 8000238:	400b      	ands	r3, r1
 800023a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 800023c:	4b42      	ldr	r3, [pc, #264]	; (8000348 <Update+0x1d8>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	7992      	ldrb	r2, [r2, #6]
 8000244:	4611      	mov	r1, r2
 8000246:	2201      	movs	r2, #1
 8000248:	408a      	lsls	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a3e      	ldr	r2, [pc, #248]	; (8000348 <Update+0x1d8>)
 8000250:	400b      	ands	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]

	if ( EXTI_Config->Detect_EXTI == RISING)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	7b1b      	ldrb	r3, [r3, #12]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d10b      	bne.n	8000274 <Update+0x104>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 800025c:	4b3a      	ldr	r3, [pc, #232]	; (8000348 <Update+0x1d8>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	7992      	ldrb	r2, [r2, #6]
 8000264:	4611      	mov	r1, r2
 8000266:	2201      	movs	r2, #1
 8000268:	408a      	lsls	r2, r1
 800026a:	4611      	mov	r1, r2
 800026c:	4a36      	ldr	r2, [pc, #216]	; (8000348 <Update+0x1d8>)
 800026e:	430b      	orrs	r3, r1
 8000270:	6093      	str	r3, [r2, #8]
 8000272:	e029      	b.n	80002c8 <Update+0x158>
	}
	else if (EXTI_Config->Detect_EXTI == FALLING)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	7b1b      	ldrb	r3, [r3, #12]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d10b      	bne.n	8000294 <Update+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 800027c:	4b32      	ldr	r3, [pc, #200]	; (8000348 <Update+0x1d8>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	7992      	ldrb	r2, [r2, #6]
 8000284:	4611      	mov	r1, r2
 8000286:	2201      	movs	r2, #1
 8000288:	408a      	lsls	r2, r1
 800028a:	4611      	mov	r1, r2
 800028c:	4a2e      	ldr	r2, [pc, #184]	; (8000348 <Update+0x1d8>)
 800028e:	430b      	orrs	r3, r1
 8000290:	60d3      	str	r3, [r2, #12]
 8000292:	e019      	b.n	80002c8 <Update+0x158>
	}
	else if (EXTI_Config->Detect_EXTI == RISING_FALLING)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7b1b      	ldrb	r3, [r3, #12]
 8000298:	2b03      	cmp	r3, #3
 800029a:	d115      	bne.n	80002c8 <Update+0x158>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 800029c:	4b2a      	ldr	r3, [pc, #168]	; (8000348 <Update+0x1d8>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	7992      	ldrb	r2, [r2, #6]
 80002a4:	4611      	mov	r1, r2
 80002a6:	2201      	movs	r2, #1
 80002a8:	408a      	lsls	r2, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	4a26      	ldr	r2, [pc, #152]	; (8000348 <Update+0x1d8>)
 80002ae:	430b      	orrs	r3, r1
 80002b0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <Update+0x1d8>)
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	7992      	ldrb	r2, [r2, #6]
 80002ba:	4611      	mov	r1, r2
 80002bc:	2201      	movs	r2, #1
 80002be:	408a      	lsls	r2, r1
 80002c0:	4611      	mov	r1, r2
 80002c2:	4a21      	ldr	r2, [pc, #132]	; (8000348 <Update+0x1d8>)
 80002c4:	430b      	orrs	r3, r1
 80002c6:	6093      	str	r3, [r2, #8]
	}
	//-------------------------------------------

	// 4- Store the address of Function Call back you need to execute while EXTI Line happen
	GP_IRQ[EXTI_Config->EXTI_PIN.EXTI_Line] = EXTI_Config->PF_IRQ;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	799b      	ldrb	r3, [r3, #6]
 80002cc:	4619      	mov	r1, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a1e      	ldr	r2, [pc, #120]	; (800034c <Update+0x1dc>)
 80002d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//-------------------------------------------

	// 5- Enable Mask for NVIC And EXTI to Receive IRQ
	if (EXTI_Config->IRQ_EN == EN_EXTI)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	7b5b      	ldrb	r3, [r3, #13]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d110      	bne.n	8000302 <Update+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line);
 80002e0:	4b19      	ldr	r3, [pc, #100]	; (8000348 <Update+0x1d8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7992      	ldrb	r2, [r2, #6]
 80002e8:	4611      	mov	r1, r2
 80002ea:	2201      	movs	r2, #1
 80002ec:	408a      	lsls	r2, r1
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a15      	ldr	r2, [pc, #84]	; (8000348 <Update+0x1d8>)
 80002f2:	430b      	orrs	r3, r1
 80002f4:	6013      	str	r3, [r2, #0]
		EN_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	799b      	ldrb	r3, [r3, #6]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f834 	bl	8000368 <EN_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line);
		DIS_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line);
	}
	//-------------------------------------------
}
 8000300:	e014      	b.n	800032c <Update+0x1bc>
	else if (EXTI_Config->IRQ_EN == DIS_EXTI)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	7b5b      	ldrb	r3, [r3, #13]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d110      	bne.n	800032c <Update+0x1bc>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line);
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <Update+0x1d8>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	7992      	ldrb	r2, [r2, #6]
 8000312:	4611      	mov	r1, r2
 8000314:	2201      	movs	r2, #1
 8000316:	408a      	lsls	r2, r1
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <Update+0x1d8>)
 800031e:	400b      	ands	r3, r1
 8000320:	6013      	str	r3, [r2, #0]
		DIS_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	799b      	ldrb	r3, [r3, #6]
 8000326:	4618      	mov	r0, r3
 8000328:	f000 f87e 	bl	8000428 <DIS_NVIC>
}
 800032c:	bf00      	nop
 800032e:	3718      	adds	r7, #24
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40010000 	.word	0x40010000
 8000338:	40010800 	.word	0x40010800
 800033c:	40010c00 	.word	0x40010c00
 8000340:	40011000 	.word	0x40011000
 8000344:	40011400 	.word	0x40011400
 8000348:	40010400 	.word	0x40010400
 800034c:	20000020 	.word	0x20000020

08000350 <EXTI_Init>:

void EXTI_Init(EXIT_t *EXTI_Config)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	Update(EXTI_Config);
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ff09 	bl	8000170 <Update>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <EN_NVIC>:
	NVIC_Disable_EXTI5_9;
	NVIC_Disable_EXTI10_15;
}

static void EN_NVIC(uint8_t Line)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	switch (Line)
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	2b0f      	cmp	r3, #15
 8000376:	d84d      	bhi.n	8000414 <EN_NVIC+0xac>
 8000378:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <EN_NVIC+0x18>)
 800037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800037e:	bf00      	nop
 8000380:	080003c1 	.word	0x080003c1
 8000384:	080003cf 	.word	0x080003cf
 8000388:	08000415 	.word	0x08000415
 800038c:	080003dd 	.word	0x080003dd
 8000390:	080003eb 	.word	0x080003eb
 8000394:	080003f9 	.word	0x080003f9
 8000398:	080003f9 	.word	0x080003f9
 800039c:	080003f9 	.word	0x080003f9
 80003a0:	080003f9 	.word	0x080003f9
 80003a4:	080003f9 	.word	0x080003f9
 80003a8:	08000407 	.word	0x08000407
 80003ac:	08000407 	.word	0x08000407
 80003b0:	08000407 	.word	0x08000407
 80003b4:	08000407 	.word	0x08000407
 80003b8:	08000407 	.word	0x08000407
 80003bc:	08000407 	.word	0x08000407
	{
	case 0:
		NVIC_Enable_EXTI0;break;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <EN_NVIC+0xb8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a16      	ldr	r2, [pc, #88]	; (8000420 <EN_NVIC+0xb8>)
 80003c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	e023      	b.n	8000416 <EN_NVIC+0xae>
	case 1:
		NVIC_Enable_EXTI1;break;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <EN_NVIC+0xb8>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a13      	ldr	r2, [pc, #76]	; (8000420 <EN_NVIC+0xb8>)
 80003d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	e01c      	b.n	8000416 <EN_NVIC+0xae>
	case 3:
		NVIC_Enable_EXTI3;break;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <EN_NVIC+0xb8>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <EN_NVIC+0xb8>)
 80003e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003e6:	6013      	str	r3, [r2, #0]
 80003e8:	e015      	b.n	8000416 <EN_NVIC+0xae>
	case 4:
		NVIC_Enable_EXTI4;break;
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <EN_NVIC+0xb8>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <EN_NVIC+0xb8>)
 80003f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f4:	6013      	str	r3, [r2, #0]
 80003f6:	e00e      	b.n	8000416 <EN_NVIC+0xae>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_Enable_EXTI5_9;break;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <EN_NVIC+0xb8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a08      	ldr	r2, [pc, #32]	; (8000420 <EN_NVIC+0xb8>)
 80003fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000402:	6013      	str	r3, [r2, #0]
 8000404:	e007      	b.n	8000416 <EN_NVIC+0xae>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_Enable_EXTI10_15;break;
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <EN_NVIC+0xbc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a06      	ldr	r2, [pc, #24]	; (8000424 <EN_NVIC+0xbc>)
 800040c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000410:	6013      	str	r3, [r2, #0]
 8000412:	e000      	b.n	8000416 <EN_NVIC+0xae>
	default: break;
 8000414:	bf00      	nop
	}
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	e000e100 	.word	0xe000e100
 8000424:	e000e104 	.word	0xe000e104

08000428 <DIS_NVIC>:

static void DIS_NVIC(uint8_t Line)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	switch (Line)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b0f      	cmp	r3, #15
 8000436:	d84d      	bhi.n	80004d4 <DIS_NVIC+0xac>
 8000438:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <DIS_NVIC+0x18>)
 800043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043e:	bf00      	nop
 8000440:	08000481 	.word	0x08000481
 8000444:	0800048f 	.word	0x0800048f
 8000448:	080004d5 	.word	0x080004d5
 800044c:	0800049d 	.word	0x0800049d
 8000450:	080004ab 	.word	0x080004ab
 8000454:	080004b9 	.word	0x080004b9
 8000458:	080004b9 	.word	0x080004b9
 800045c:	080004b9 	.word	0x080004b9
 8000460:	080004b9 	.word	0x080004b9
 8000464:	080004b9 	.word	0x080004b9
 8000468:	080004c7 	.word	0x080004c7
 800046c:	080004c7 	.word	0x080004c7
 8000470:	080004c7 	.word	0x080004c7
 8000474:	080004c7 	.word	0x080004c7
 8000478:	080004c7 	.word	0x080004c7
 800047c:	080004c7 	.word	0x080004c7
	{
	case 0:
		NVIC_Disable_EXTI0;break;
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <DIS_NVIC+0xb8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <DIS_NVIC+0xb8>)
 8000486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048a:	6013      	str	r3, [r2, #0]
 800048c:	e023      	b.n	80004d6 <DIS_NVIC+0xae>
	case 1:
		NVIC_Disable_EXTI1;break;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <DIS_NVIC+0xb8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <DIS_NVIC+0xb8>)
 8000494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000498:	6013      	str	r3, [r2, #0]
 800049a:	e01c      	b.n	80004d6 <DIS_NVIC+0xae>
	case 3:
		NVIC_Disable_EXTI3;break;
 800049c:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <DIS_NVIC+0xb8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <DIS_NVIC+0xb8>)
 80004a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004a6:	6013      	str	r3, [r2, #0]
 80004a8:	e015      	b.n	80004d6 <DIS_NVIC+0xae>
	case 4:
		NVIC_Disable_EXTI4;break;
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <DIS_NVIC+0xb8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <DIS_NVIC+0xb8>)
 80004b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004b4:	6013      	str	r3, [r2, #0]
 80004b6:	e00e      	b.n	80004d6 <DIS_NVIC+0xae>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_Disable_EXTI5_9;break;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <DIS_NVIC+0xb8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <DIS_NVIC+0xb8>)
 80004be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004c2:	6013      	str	r3, [r2, #0]
 80004c4:	e007      	b.n	80004d6 <DIS_NVIC+0xae>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_Disable_EXTI10_15;break;
 80004c6:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <DIS_NVIC+0xbc>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <DIS_NVIC+0xbc>)
 80004cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d0:	6013      	str	r3, [r2, #0]
 80004d2:	e000      	b.n	80004d6 <DIS_NVIC+0xae>
	default: break;
 80004d4:	bf00      	nop
	}
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	e000e180 	.word	0xe000e180
 80004e4:	e000e184 	.word	0xe000e184

080004e8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI0;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI0_IRQHandler+0x1c>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI0_IRQHandler+0x1c>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	6153      	str	r3, [r2, #20]
	GP_IRQ[0]();
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <EXTI0_IRQHandler+0x20>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4798      	blx	r3
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010400 	.word	0x40010400
 8000508:	20000020 	.word	0x20000020

0800050c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI1;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <EXTI1_IRQHandler+0x1c>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <EXTI1_IRQHandler+0x1c>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	6153      	str	r3, [r2, #20]
	GP_IRQ[1]();
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <EXTI1_IRQHandler+0x20>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4798      	blx	r3
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010400 	.word	0x40010400
 800052c:	20000020 	.word	0x20000020

08000530 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI2;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <EXTI2_IRQHandler+0x1c>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <EXTI2_IRQHandler+0x1c>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6153      	str	r3, [r2, #20]
	GP_IRQ[2]();
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <EXTI2_IRQHandler+0x20>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	4798      	blx	r3
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010400 	.word	0x40010400
 8000550:	20000020 	.word	0x20000020

08000554 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI3;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <EXTI3_IRQHandler+0x1c>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <EXTI3_IRQHandler+0x1c>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6153      	str	r3, [r2, #20]
	GP_IRQ[3]();
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <EXTI3_IRQHandler+0x20>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4798      	blx	r3
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40010400 	.word	0x40010400
 8000574:	20000020 	.word	0x20000020

08000578 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI4;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <EXTI4_IRQHandler+0x1c>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <EXTI4_IRQHandler+0x1c>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6153      	str	r3, [r2, #20]
	GP_IRQ[4]();
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <EXTI4_IRQHandler+0x20>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	4798      	blx	r3
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010400 	.word	0x40010400
 8000598:	20000020 	.word	0x20000020

0800059c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<5){	EXTI->PR |= 1<<EXTI5;	GP_IRQ[5]();}
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	f003 0320 	and.w	r3, r3, #32
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d008      	beq.n	80005be <EXTI9_5_IRQHandler+0x22>
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	6153      	str	r3, [r2, #20]
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4798      	blx	r3
	if (EXTI->PR & 1<<6){	EXTI->PR |= 1<<EXTI6;	GP_IRQ[6]();}
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d008      	beq.n	80005dc <EXTI9_5_IRQHandler+0x40>
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4798      	blx	r3
	if (EXTI->PR & 1<<7){	EXTI->PR |= 1<<EXTI7;	GP_IRQ[7]();}
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d008      	beq.n	80005fa <EXTI9_5_IRQHandler+0x5e>
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f2:	6153      	str	r3, [r2, #20]
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	4798      	blx	r3
	if (EXTI->PR & 1<<8){	EXTI->PR |= 1<<EXTI8;	GP_IRQ[8]();}
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <EXTI9_5_IRQHandler+0x7c>
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 8000614:	6a1b      	ldr	r3, [r3, #32]
 8000616:	4798      	blx	r3
	if (EXTI->PR & 1<<9){	EXTI->PR |= 1<<EXTI9;	GP_IRQ[9]();}
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000620:	2b00      	cmp	r3, #0
 8000622:	d008      	beq.n	8000636 <EXTI9_5_IRQHandler+0x9a>
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 8000632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000634:	4798      	blx	r3
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010400 	.word	0x40010400
 8000640:	20000020 	.word	0x20000020

08000644 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<10){	EXTI->PR |= 1<<EXTI10;	GP_IRQ[10]();}
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000650:	2b00      	cmp	r3, #0
 8000652:	d008      	beq.n	8000666 <EXTI15_10_IRQHandler+0x22>
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a29      	ldr	r2, [pc, #164]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 800065a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065e:	6153      	str	r3, [r2, #20]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	4798      	blx	r3
	if (EXTI->PR & 1<<11){	EXTI->PR |= 1<<EXTI11;	GP_IRQ[11]();}
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <EXTI15_10_IRQHandler+0x40>
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	4798      	blx	r3
	if (EXTI->PR & 1<<12){	EXTI->PR |= 1<<EXTI12;	GP_IRQ[12]();}
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <EXTI15_10_IRQHandler+0x5e>
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4798      	blx	r3
	if (EXTI->PR & 1<<13){	EXTI->PR |= 1<<EXTI13;	GP_IRQ[13]();}
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d008      	beq.n	80006c0 <EXTI15_10_IRQHandler+0x7c>
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006be:	4798      	blx	r3
	if (EXTI->PR & 1<<14){	EXTI->PR |= 1<<EXTI14;	GP_IRQ[14]();}
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d008      	beq.n	80006de <EXTI15_10_IRQHandler+0x9a>
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6153      	str	r3, [r2, #20]
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006dc:	4798      	blx	r3
	if (EXTI->PR & 1<<15){	EXTI->PR |= 1<<EXTI15;	GP_IRQ[15]();}
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <EXTI15_10_IRQHandler+0xb8>
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b03      	ldr	r3, [pc, #12]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006fa:	4798      	blx	r3
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010400 	.word	0x40010400
 8000704:	20000020 	.word	0x20000020

08000708 <GetPos>:
							/*************************************/
							/*       Function Definition         */
							/*************************************/

uint8_t GetPos(PINy_t PinNumber)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	2b80      	cmp	r3, #128	; 0x80
 8000716:	d042      	beq.n	800079e <GetPos+0x96>
 8000718:	2b80      	cmp	r3, #128	; 0x80
 800071a:	dc11      	bgt.n	8000740 <GetPos+0x38>
 800071c:	2b08      	cmp	r3, #8
 800071e:	d036      	beq.n	800078e <GetPos+0x86>
 8000720:	2b08      	cmp	r3, #8
 8000722:	dc06      	bgt.n	8000732 <GetPos+0x2a>
 8000724:	2b02      	cmp	r3, #2
 8000726:	d02e      	beq.n	8000786 <GetPos+0x7e>
 8000728:	2b04      	cmp	r3, #4
 800072a:	d02e      	beq.n	800078a <GetPos+0x82>
 800072c:	2b01      	cmp	r3, #1
 800072e:	d028      	beq.n	8000782 <GetPos+0x7a>
 8000730:	e037      	b.n	80007a2 <GetPos+0x9a>
 8000732:	2b20      	cmp	r3, #32
 8000734:	d02f      	beq.n	8000796 <GetPos+0x8e>
 8000736:	2b40      	cmp	r3, #64	; 0x40
 8000738:	d02f      	beq.n	800079a <GetPos+0x92>
 800073a:	2b10      	cmp	r3, #16
 800073c:	d029      	beq.n	8000792 <GetPos+0x8a>
 800073e:	e030      	b.n	80007a2 <GetPos+0x9a>
 8000740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000744:	d023      	beq.n	800078e <GetPos+0x86>
 8000746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800074a:	dc09      	bgt.n	8000760 <GetPos+0x58>
 800074c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000750:	d019      	beq.n	8000786 <GetPos+0x7e>
 8000752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000756:	d018      	beq.n	800078a <GetPos+0x82>
 8000758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800075c:	d011      	beq.n	8000782 <GetPos+0x7a>
 800075e:	e020      	b.n	80007a2 <GetPos+0x9a>
 8000760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000764:	d017      	beq.n	8000796 <GetPos+0x8e>
 8000766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076a:	dc03      	bgt.n	8000774 <GetPos+0x6c>
 800076c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000770:	d00f      	beq.n	8000792 <GetPos+0x8a>
 8000772:	e016      	b.n	80007a2 <GetPos+0x9a>
 8000774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000778:	d00f      	beq.n	800079a <GetPos+0x92>
 800077a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800077e:	d00e      	beq.n	800079e <GetPos+0x96>
 8000780:	e00f      	b.n	80007a2 <GetPos+0x9a>
	{
	case GPIO_PIN0 :
	case GPIO_PIN8 :
		return 0; break;
 8000782:	2300      	movs	r3, #0
 8000784:	e00e      	b.n	80007a4 <GetPos+0x9c>
	case GPIO_PIN1 :
	case GPIO_PIN9 :
		return 4; break;
 8000786:	2304      	movs	r3, #4
 8000788:	e00c      	b.n	80007a4 <GetPos+0x9c>
	case GPIO_PIN2 :
	case GPIO_PIN10:
		return 8; break;
 800078a:	2308      	movs	r3, #8
 800078c:	e00a      	b.n	80007a4 <GetPos+0x9c>
	case GPIO_PIN3 :
	case GPIO_PIN11:
		return 12; break;
 800078e:	230c      	movs	r3, #12
 8000790:	e008      	b.n	80007a4 <GetPos+0x9c>
	case GPIO_PIN4 :
	case GPIO_PIN12:
		return 16; break;
 8000792:	2310      	movs	r3, #16
 8000794:	e006      	b.n	80007a4 <GetPos+0x9c>
	case GPIO_PIN5 :
	case GPIO_PIN13:
		return 20; break;
 8000796:	2314      	movs	r3, #20
 8000798:	e004      	b.n	80007a4 <GetPos+0x9c>
	case GPIO_PIN6 :
	case GPIO_PIN14:
		return 24; break;
 800079a:	2318      	movs	r3, #24
 800079c:	e002      	b.n	80007a4 <GetPos+0x9c>
	case GPIO_PIN7 :
	case GPIO_PIN15:
		return 28; break;
 800079e:	231c      	movs	r3, #28
 80007a0:	e000      	b.n	80007a4 <GetPos+0x9c>
	default :
		return 0; break;
 80007a2:	2300      	movs	r3, #0
	}
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <GPIO_INIT>:

void GPIO_INIT(GPIO_PinConfig_t *myPin)
{
 80007ae:	b590      	push	{r4, r7, lr}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	volatile uint32_t *configReg = NULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0x0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73fb      	strb	r3, [r7, #15]
	configReg = (myPin->GPIO_PinNumber < GPIO_PIN8) ? (&(myPin->GPIOx->CRL)) : (&(myPin->GPIOx->CRH));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	889b      	ldrh	r3, [r3, #4]
 80007c2:	2bff      	cmp	r3, #255	; 0xff
 80007c4:	d802      	bhi.n	80007cc <GPIO_INIT+0x1e>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	e002      	b.n	80007d2 <GPIO_INIT+0x24>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3304      	adds	r3, #4
 80007d2:	60bb      	str	r3, [r7, #8]
	// Clear CNF0[1:0] MODE0[1:0]
	(*configReg) &= ~(0xF << GetPos(myPin->GPIO_PinNumber));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	889b      	ldrh	r3, [r3, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff95 	bl	8000708 <GetPos>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	230f      	movs	r3, #15
 80007e4:	4093      	lsls	r3, r2
 80007e6:	43da      	mvns	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	401a      	ands	r2, r3
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	601a      	str	r2, [r3, #0]

	if ( (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	799b      	ldrb	r3, [r3, #6]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d00b      	beq.n	8000812 <GPIO_INIT+0x64>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	799b      	ldrb	r3, [r3, #6]
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d007      	beq.n	8000812 <GPIO_INIT+0x64>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	799b      	ldrb	r3, [r3, #6]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d003      	beq.n	8000812 <GPIO_INIT+0x64>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	799b      	ldrb	r3, [r3, #6]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d10e      	bne.n	8000830 <GPIO_INIT+0x82>
	{
		// Set CNF0[1:0] -> (his mode)  MODE0[1:0] -> 00
		Pin_Config = ((((myPin->GPIO_MODE - 4) << 2) | (myPin->GPIO_OUTPUT_Speed)) & 0x0F);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	799b      	ldrb	r3, [r3, #6]
 8000816:	3b04      	subs	r3, #4
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	b25a      	sxtb	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	79db      	ldrb	r3, [r3, #7]
 8000820:	b25b      	sxtb	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f003 030f 	and.w	r3, r3, #15
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e030      	b.n	8000892 <GPIO_INIT+0xe4>
	}
	else
	{
		if (myPin->GPIO_MODE == GPIO_MODE_INPUT_AF) // Considered input Floating
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	799b      	ldrb	r3, [r3, #6]
 8000834:	2b08      	cmp	r3, #8
 8000836:	d102      	bne.n	800083e <GPIO_INIT+0x90>
		{
			Pin_Config = ((GPIO_MODE_INPUT_FLO << 2 | 0x0) & 0x0F);
 8000838:	2304      	movs	r3, #4
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e029      	b.n	8000892 <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	799b      	ldrb	r3, [r3, #6]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d10c      	bne.n	8000860 <GPIO_INIT+0xb2>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2 | 0x0) & 0x0F);
 8000846:	2308      	movs	r3, #8
 8000848:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->1 to set pin as Input Pull Up
			myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68da      	ldr	r2, [r3, #12]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	889b      	ldrh	r3, [r3, #4]
 8000854:	4619      	mov	r1, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	430a      	orrs	r2, r1
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	e018      	b.n	8000892 <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PD)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	799b      	ldrb	r3, [r3, #6]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d10d      	bne.n	8000884 <GPIO_INIT+0xd6>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2) & 0x0F);
 8000868:	2308      	movs	r3, #8
 800086a:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->0 to set pin as Input Pull Down
			myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	889b      	ldrh	r3, [r3, #4]
 8000876:	43db      	mvns	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	400a      	ands	r2, r1
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	e006      	b.n	8000892 <GPIO_INIT+0xe4>
		}
		else
		{
			Pin_Config = ((myPin->GPIO_MODE << 2 | 0x0) & 0x0F);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	799b      	ldrb	r3, [r3, #6]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	73fb      	strb	r3, [r7, #15]
		}
	}
	// Writing on CRL OR CRH Reg
	(*configReg) |= ((Pin_Config) << GetPos(myPin->GPIO_PinNumber));
 8000892:	7bfc      	ldrb	r4, [r7, #15]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	889b      	ldrh	r3, [r3, #4]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff35 	bl	8000708 <GetPos>
 800089e:	4603      	mov	r3, r0
 80008a0:	fa04 f203 	lsl.w	r2, r4, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	431a      	orrs	r2, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	601a      	str	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}
	...

080008b8 <USART1_IRQHandler>:
	}
}

// ISR
void USART1_IRQHandler()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[0]();
 80008bc:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <USART1_IRQHandler+0x10>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4798      	blx	r3
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000064 	.word	0x20000064

080008cc <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[1]();
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <USART2_IRQHandler+0x10>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	4798      	blx	r3
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000064 	.word	0x20000064

080008e0 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[2]();
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <USART3_IRQHandler+0x10>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	4798      	blx	r3
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000064 	.word	0x20000064

080008f4 <init_Func>:

void EXT_Callback(void);


void init_Func()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	ext.Detect_EXTI = RISING;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <init_Func+0x2c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	731a      	strb	r2, [r3, #12]
	ext.EXTI_PIN 	= EXTI9PB9;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <init_Func+0x2c>)
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <init_Func+0x30>)
 8000902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000906:	e883 0003 	stmia.w	r3, {r0, r1}
	ext.IRQ_EN 		= EN_EXTI;
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <init_Func+0x2c>)
 800090c:	2201      	movs	r2, #1
 800090e:	735a      	strb	r2, [r3, #13]
	ext.PF_IRQ		= EXT_Callback;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <init_Func+0x2c>)
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <init_Func+0x34>)
 8000914:	609a      	str	r2, [r3, #8]
	EXTI_Init(&ext);
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <init_Func+0x2c>)
 8000918:	f7ff fd1a 	bl	8000350 <EXTI_Init>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000070 	.word	0x20000070
 8000924:	08000bc8 	.word	0x08000bc8
 8000928:	08000ad1 	.word	0x08000ad1

0800092c <SVC_Handler>:
		for (volatile int j = 0; j < 255; j++);
	}
}

void SVC_Handler()
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	SWITCH_CPU_TO_PRIV;
 8000930:	f3ef 8014 	mrs	r0, CONTROL
 8000934:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8000938:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800093c:	f380 8814 	msr	CONTROL, r0
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <TASKA>:

unsigned int TASKA(int a, int b, int c)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	return a+b+c;
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	441a      	add	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
}
 800095e:	4618      	mov	r0, r3
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <TASKB>:

unsigned int TASKB(int a, int b, int c, int d)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
	return a+b+c+d;
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	441a      	add	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	441a      	add	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	4413      	add	r3, r2
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
	...

08000990 <MainOS>:

void MainOS()
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	E_MSP	 =		(S_MSP - MAIN_STACK_SIZE);
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MainOS+0x44>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <MainOS+0x48>)
 800099e:	6013      	str	r3, [r2, #0]


	S_TASKA =		(E_MSP   - STACK_ALLIGN);
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MainOS+0x48>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3b08      	subs	r3, #8
 80009a6:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <MainOS+0x4c>)
 80009a8:	6013      	str	r3, [r2, #0]
	E_TASKA =		(S_TASKA - STACK_SIZE_TASKA);
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MainOS+0x4c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MainOS+0x50>)
 80009b4:	6013      	str	r3, [r2, #0]


	S_TASKB =		(E_TASKA - STACK_ALLIGN);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MainOS+0x50>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3b08      	subs	r3, #8
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <MainOS+0x54>)
 80009be:	6013      	str	r3, [r2, #0]
	E_TASKB = 		(S_TASKB - STACK_SIZE_TASKB);
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MainOS+0x54>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <MainOS+0x58>)
 80009ca:	6013      	str	r3, [r2, #0]

}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000088 	.word	0x20000088
 80009dc:	20000080 	.word	0x20000080
 80009e0:	20000084 	.word	0x20000084
 80009e4:	20000090 	.word	0x20000090
 80009e8:	2000008c 	.word	0x2000008c

080009ec <main>:

int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN;
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <main+0xd0>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a31      	ldr	r2, [pc, #196]	; (8000abc <main+0xd0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN;
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <main+0xd0>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <main+0xd0>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN;
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <main+0xd0>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <main+0xd0>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]

	init_Func();
 8000a16:	f7ff ff6d 	bl	80008f4 <init_Func>

	MainOS();
 8000a1a:	f7ff ffb9 	bl	8000990 <MainOS>

	unsigned int res = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]

	while(1)
	{
		if (FLAG_A)
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <main+0xd4>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d021      	beq.n	8000a6e <main+0x82>
		{
			FLAG_A = 0;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <main+0xd4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
			// SP Shadow To PSP
			OS_SP_TO_PSP;
 8000a30:	f3ef 8014 	mrs	r0, CONTROL
 8000a34:	f040 0002 	orr.w	r0, r0, #2
 8000a38:	f380 8814 	msr	CONTROL, r0
			// SP Have Address of TASK A
			OS_SET_PSP(S_TASKA);
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <main+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f380 8809 	msr	PSP, r0
			// Switch to UnPrivillage Mode
			SWITCH_CPU_TO_UNPRIV;
 8000a46:	f3ef 8014 	mrs	r0, CONTROL
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	f380 8814 	msr	CONTROL, r0


			// Execute Task A
			res = TASKA(1,2,3);
 8000a52:	2203      	movs	r2, #3
 8000a54:	2102      	movs	r1, #2
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff ff76 	bl	8000948 <TASKA>
 8000a5c:	6078      	str	r0, [r7, #4]

			// Generate IRQ To be in Handle Mode
			OS_GENERATE_EXCEPTION;
 8000a5e:	df03      	svc	3

			// SP Shadow To MSP
			OS_SP_TO_MSP;
 8000a60:	f3ef 8014 	mrs	r0, CONTROL
 8000a64:	f000 0005 	and.w	r0, r0, #5
 8000a68:	f380 8814 	msr	CONTROL, r0
 8000a6c:	e7d9      	b.n	8000a22 <main+0x36>

		}
		else if (FLAG_B)
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <main+0xdc>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0d5      	beq.n	8000a22 <main+0x36>
		{
			FLAG_B = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <main+0xdc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
			// SP Shadow To PSP
			OS_SP_TO_PSP;
 8000a7c:	f3ef 8014 	mrs	r0, CONTROL
 8000a80:	f040 0002 	orr.w	r0, r0, #2
 8000a84:	f380 8814 	msr	CONTROL, r0
			// SP Have Address of TASK A
			OS_SET_PSP(S_TASKB);
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <main+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f380 8809 	msr	PSP, r0
			// Switch to UnPrivillage Mode
			SWITCH_CPU_TO_UNPRIV;
 8000a92:	f3ef 8014 	mrs	r0, CONTROL
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	f380 8814 	msr	CONTROL, r0


			// Execute Task B
			res = TASKB(1,2,3,4);
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ff5f 	bl	8000968 <TASKB>
 8000aaa:	6078      	str	r0, [r7, #4]

			// Generate IRQ To be in Handle Mode
			OS_GENERATE_EXCEPTION;
 8000aac:	df03      	svc	3

			// SP Shadow To MSP
			OS_SP_TO_MSP;
 8000aae:	f3ef 8014 	mrs	r0, CONTROL
 8000ab2:	f000 0005 	and.w	r0, r0, #5
 8000ab6:	f380 8814 	msr	CONTROL, r0
		if (FLAG_A)
 8000aba:	e7b2      	b.n	8000a22 <main+0x36>
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	2000005c 	.word	0x2000005c
 8000ac4:	20000080 	.word	0x20000080
 8000ac8:	2000005d 	.word	0x2000005d
 8000acc:	20000090 	.word	0x20000090

08000ad0 <EXT_Callback>:
		}
	}
}

void EXT_Callback(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	if (IRQ_FLAG == 1)
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <EXT_Callback+0x38>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d106      	bne.n	8000aea <EXT_Callback+0x1a>
	{
		IRQ_FLAG = 0;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <EXT_Callback+0x38>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
		FLAG_A = 1;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <EXT_Callback+0x3c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
	{
		IRQ_FLAG = 1;
		FLAG_B = 1;
	}

}
 8000ae8:	e009      	b.n	8000afe <EXT_Callback+0x2e>
	else if (IRQ_FLAG == 0)
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <EXT_Callback+0x38>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d105      	bne.n	8000afe <EXT_Callback+0x2e>
		IRQ_FLAG = 1;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <EXT_Callback+0x38>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
		FLAG_B = 1;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <EXT_Callback+0x40>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000060 	.word	0x20000060
 8000b0c:	2000005c 	.word	0x2000005c
 8000b10:	2000005d 	.word	0x2000005d

08000b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	; (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b42:	f000 f811 	bl	8000b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff ff51 	bl	80009ec <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   r0, =_estack
 8000b4c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b58:	08000bd8 	.word	0x08000bd8
  ldr r2, =_sbss
 8000b5c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b60:	20000094 	.word	0x20000094

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>
	...

08000b68 <__libc_init_array>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	2500      	movs	r5, #0
 8000b6c:	4e0c      	ldr	r6, [pc, #48]	; (8000ba0 <__libc_init_array+0x38>)
 8000b6e:	4c0d      	ldr	r4, [pc, #52]	; (8000ba4 <__libc_init_array+0x3c>)
 8000b70:	1ba4      	subs	r4, r4, r6
 8000b72:	10a4      	asrs	r4, r4, #2
 8000b74:	42a5      	cmp	r5, r4
 8000b76:	d109      	bne.n	8000b8c <__libc_init_array+0x24>
 8000b78:	f000 f81a 	bl	8000bb0 <_init>
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	4e0a      	ldr	r6, [pc, #40]	; (8000ba8 <__libc_init_array+0x40>)
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <__libc_init_array+0x44>)
 8000b82:	1ba4      	subs	r4, r4, r6
 8000b84:	10a4      	asrs	r4, r4, #2
 8000b86:	42a5      	cmp	r5, r4
 8000b88:	d105      	bne.n	8000b96 <__libc_init_array+0x2e>
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b90:	4798      	blx	r3
 8000b92:	3501      	adds	r5, #1
 8000b94:	e7ee      	b.n	8000b74 <__libc_init_array+0xc>
 8000b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b9a:	4798      	blx	r3
 8000b9c:	3501      	adds	r5, #1
 8000b9e:	e7f2      	b.n	8000b86 <__libc_init_array+0x1e>
 8000ba0:	08000bd0 	.word	0x08000bd0
 8000ba4:	08000bd0 	.word	0x08000bd0
 8000ba8:	08000bd0 	.word	0x08000bd0
 8000bac:	08000bd4 	.word	0x08000bd4

08000bb0 <_init>:
 8000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb2:	bf00      	nop
 8000bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bb6:	bc08      	pop	{r3}
 8000bb8:	469e      	mov	lr, r3
 8000bba:	4770      	bx	lr

08000bbc <_fini>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	bf00      	nop
 8000bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc2:	bc08      	pop	{r3}
 8000bc4:	469e      	mov	lr, r3
 8000bc6:	4770      	bx	lr
